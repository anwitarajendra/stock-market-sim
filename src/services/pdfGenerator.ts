import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PortfolioData {
  totalInvested: number;
  currentValue: number;
  totalReturn: number;
  returnPercentage: number;
  holdings: Array<{
    symbol: string;
    allocation: number;
    value: number;
    change: number;
  }>;
  performance: {
    totalTrades: number;
    winRate: number;
    avgProfit: number;
    maxDrawdown: number;
    sharpeRatio: number;
  };
}

export class PDFGenerator {
  static async generatePortfolioReport(portfolioData: PortfolioData): Promise<void> {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    
    // Header
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.text('AlgoTradeSim Portfolio Report', pageWidth / 2, 30, { align: 'center' });
    
    // Date
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, 40, { align: 'center' });
    
    // Portfolio Summary
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Portfolio Summary', 20, 60);
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    let yPos = 75;
    
    const summaryData = [
      ['Total Invested:', `$${portfolioData.totalInvested.toLocaleString()}`],
      ['Current Value:', `$${portfolioData.currentValue.toLocaleString()}`],
      ['Total Return:', `$${portfolioData.totalReturn.toLocaleString()}`],
      ['Return Percentage:', `${portfolioData.returnPercentage.toFixed(2)}%`],
    ];
    
    summaryData.forEach(([label, value]) => {
      pdf.text(label, 20, yPos);
      pdf.text(value, 120, yPos);
      yPos += 15;
    });
    
    // Holdings
    yPos += 10;
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Holdings', 20, yPos);
    
    yPos += 15;
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Symbol', 20, yPos);
    pdf.text('Allocation', 60, yPos);
    pdf.text('Value', 100, yPos);
    pdf.text('Change', 140, yPos);
    
    yPos += 5;
    pdf.line(20, yPos, pageWidth - 20, yPos);
    yPos += 10;
    
    pdf.setFont('helvetica', 'normal');
    portfolioData.holdings.forEach(holding => {
      pdf.text(holding.symbol, 20, yPos);
      pdf.text(`${holding.allocation}%`, 60, yPos);
      pdf.text(`$${holding.value.toLocaleString()}`, 100, yPos);
      pdf.text(`${holding.change >= 0 ? '+' : ''}${holding.change.toFixed(2)}%`, 140, yPos);
      yPos += 12;
    });
    
    // Performance Metrics
    yPos += 10;
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Performance Metrics', 20, yPos);
    
    yPos += 15;
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    
    const performanceData = [
      ['Total Trades:', portfolioData.performance.totalTrades.toString()],
      ['Win Rate:', `${portfolioData.performance.winRate}%`],
      ['Average Profit:', `$${portfolioData.performance.avgProfit}`],
      ['Max Drawdown:', `${portfolioData.performance.maxDrawdown}%`],
      ['Sharpe Ratio:', portfolioData.performance.sharpeRatio.toString()],
    ];
    
    performanceData.forEach(([label, value]) => {
      pdf.text(label, 20, yPos);
      pdf.text(value, 120, yPos);
      yPos += 15;
    });
    
    // Footer
    pdf.setFontSize(8);
    pdf.text('Generated by AlgoTradeSim - Advanced Trading Simulation Platform', 
             pageWidth / 2, pageHeight - 20, { align: 'center' });
    
    // Save the PDF
    pdf.save(`AlgoTradeSim_Portfolio_Report_${new Date().toISOString().split('T')[0]}.pdf`);
  }

  static async generateTradeReport(element: HTMLElement): Promise<void> {
    try {
      const canvas = await html2canvas(element, {
        backgroundColor: '#000000',
        scale: 2,
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF();
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      
      let position = 0;
      
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      pdf.save(`AlgoTradeSim_Trade_Report_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report. Please try again.');
    }
  }
}